@using System.Text.RegularExpressions;
@using System.Text.Json.Serialization;
@using System.Text.Json;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar SnackbarService

@page "/test"

<MudOverlay @bind-Visible="isLoading" DarkBackground>
    <MudText Typo="Typo.h4">Loading...</MudText>
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate />
</MudOverlay>


@if (logEntries.Any())
{
    @foreach (var group in logEntries.GroupBy(e => e.Category))
    {
        <MudText Typo="Typo.h5">@group.Key</MudText>
        <MudList T="string">
            @foreach (var entry in group)
            {
                @entry.Display @entry.Response <br />
            }
        </MudList>
    }
}

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudPaper Elevation="0">
        <MudToolBar Class="justify-space-around" Dense>
            <MudFileUpload T="IBrowserFile" FilesChanged="FileUploaded" Accept="txt">
                <ActivatorContent>
                    <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload">
                        Browse...
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            <MudDivider Vertical="true" />

            <MudButton OnClick="DialogPopup" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Upload">
                Upload via URL
            </MudButton>
        </MudToolBar>
    </MudPaper>
</MudContainer>

@code {
    private class LogEntry
    {
        public string Display { get; set; } = string.Empty;
        public string Response { get; set; } = string.Empty;
        public string Category { get; set; } = "Uncategorized";
    }

    private List<PlayerLogRuleModel> rules = new();
    private List<LogEntry> logEntries = new();
    private string logUrl = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var json = await Http.GetStringAsync("playerlogRules.json");
            rules = JsonSerializer.Deserialize<List<PlayerLogRuleModel>>(json) ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task DialogPopup()
    {
        var parameters = new DialogParameters<Components.InsertUrlDialog>
        {
            { x => x.Content, @<MudAlert Severity="Severity.Warning">Larger files (5MB+) will not upload, This is due to the CORS proxy limit. Larger files may take longer to process (up to 10 seconds)</MudAlert> },
            { x => x.ButtonText, "Upload" }
        };

        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.ExtraSmall
            };

        var dialog = await DialogService.ShowAsync<Components.InsertUrlDialog>("URL Upload", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string url && !string.IsNullOrWhiteSpace(url))
        {
            Console.WriteLine("yes");
            logUrl = url;
            await HandleUrlUpload();
        }
    }

    private async Task HandleUrlUpload()
    {
        if (string.IsNullOrWhiteSpace(logUrl)) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            var content = await Http.GetStringAsync("https://api.codetabs.com/v1/proxy?quest=" + Uri.EscapeDataString(logUrl));
            ProcessPlayerLogContent(content);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching file: " + ex.Message);
            SnackbarService.Add($"{ex.Message}", Severity.Error, configure: a => a.VisibleStateDuration = 5000);
            //
            //
            // CREATE NEW HANDLER
            //
            //
        }

        isLoading = false;
        StateHasChanged();
    }

    private async void FileUploaded(IBrowserFile file)
    {
        isLoading = true;
        StateHasChanged();

        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); //10mb
        using var reader = new StreamReader(stream);
        var content = await reader.ReadToEndAsync();

        ProcessPlayerLogContent(content);
        isLoading = false;
        StateHasChanged();
    }

    private void ProcessPlayerLogContent(string content)
    {
        logEntries.Clear();
        var lines = content.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        foreach (var rawLine in lines)
        {
            var line = rawLine.Trim();

            foreach (var rule in rules)
            {
                var regex = new Regex(rule.Pattern, RegexOptions.IgnoreCase);
                var match = regex.Match(line);
                if (match.Success)
                {
                    var data = match.Groups[1].Value;
                    string responseText = rule.Response.Replace("${data}", data);

                    if (rule.Pattern.Contains("OS", StringComparison.OrdinalIgnoreCase))
                    {
                        responseText = responseText.Replace("${status}", GetOsStatus(data));
                    }

                    logEntries.Add(new LogEntry
                        {
                            Display = rule.Display,
                            Response = responseText,
                            Category = rule.Category
                        });

                    break;
                }
            }
        }
    }

    private string GetOsStatus(string osLine)
    {
        if (osLine.Contains("Windows 11", StringComparison.OrdinalIgnoreCase))
            return $"[Supported] {osLine}";
        else
            return $"[Unsupported] {osLine}";
    }
}