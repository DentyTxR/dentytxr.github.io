@page "/testing"
@using Blazorise
@using Blazorise.Components
@using ghp_app.Components;

<h3>Testing Page</h3>

<Blazorise.Button Color="Blazorise.Color.Primary" Clicked="ShowModal">
    Open Modal
</Blazorise.Button>

<Blazorise.Button Color="Blazorise.Color.Warning" Clicked="ShowModal">
    Open Modal
</Blazorise.Button>

<Blazorise.Button Color="Blazorise.Color.Dark" Clicked="ShowModal">
    Open Modal
</Blazorise.Button>

<Blazorise.Button Color="Blazorise.Color.Link" Clicked="ShowModal">
    Open Modal
</Blazorise.Button>

<Blazorise.Button Color="Blazorise.Color.Info" Clicked="ShowModal">
    Open Modal
</Blazorise.Button>





@if (DialogOpen)
{
    <ModalDialog Title="test"
                 Text="test"
                 DialogType="ModalDialog.ModalDialogType.Ok"
                 OnClose="OnClose">
    </ModalDialog>
}

@if (Testing1)
{
    ShowToast();
}

@code {
    public bool Testing1 = true;

    [Inject] IToastService ToastService { get; set; }

    Task ShowToast()
    {
        return ToastService.Info("This is a simple toast message!", "Hello", BuildToastInstanceOptions);
    }

    private void BuildToastInstanceOptions(ToastInstanceOptions toastInstanceOptions)
    {
        toastInstanceOptions.Animated = true;
        toastInstanceOptions.AnimationDuration = 300;
        toastInstanceOptions.Autohide = false;
        toastInstanceOptions.Closing = (e) => { Console.WriteLine("Closing"); return Task.CompletedTask; };
        toastInstanceOptions.Opening = (e) => { Console.WriteLine("Opening"); return Task.CompletedTask; };
    }

    public required bool DialogOpen { get; set; } = false;

    private void ShowModal()
    {
        DialogOpen = true;
    }

    private void OnClose()
    {
        DialogOpen = false;
    }
}
