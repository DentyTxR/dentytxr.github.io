@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inherits LayoutComponentBase
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IWebAssemblyHostEnvironment AppEnv
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider IsDarkMode="true" Theme="Theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<UpdateAvailableDetector />

<MudLayout>
    <MudAppBar Elevation="0" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(DrawerToggle)" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Width="200px" ClipMode="DrawerClipMode.Docked">
        <MudDrawerHeader LinkToIndex>
            <MudText Typo="Typo.h5">Dent App</MudText>
        </MudDrawerHeader>
        <NavMenu />
        <MudSpacer />
        @if (AppEnv.IsDevelopment())
        {
            <MudText>Development</MudText>
        }
    </MudDrawer>
    <MudMainContent>
        <ErrorBoundary @ref=errorBoundary>
            <ChildContent>
                @Body
            </ChildContent>
            <ErrorContent Context="Exception">
                @{
                    ErrorService.ShowError(Exception);
                }
            </ErrorContent>
        </ErrorBoundary>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme Theme = new MudTheme();

    private ErrorBoundary? errorBoundary;
    bool _drawerOpen = true;

    protected override async Task OnInitializedAsync()
    {
        ErrorService.Initialize(Snackbar);
        Theme = await SettingsService.GetThemeAsync();
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}