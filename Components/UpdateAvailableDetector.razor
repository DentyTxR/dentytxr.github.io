@inject ISnackbar SnackbarService
@inject IJSRuntime _jsRuntime
@inject NavigationManager NavigationManager

@if (_newVersionAvailable)
{
    var config = (SnackbarOptions options) =>
    {
        options.RequireInteraction = true;
        options.ShowCloseIcon = false;
        options.Action = "Update";
        options.ActionColor = Color.Primary;
        options.Onclick = snackbar =>
        {
            _newVersionAvailable = false;
            StateHasChanged();
            ReloadPage();
            return Task.CompletedTask;
        };
    };

    SnackbarService.Add(@<span>A new version of the app is available.<br /> <b>Version:</b> @_newVersion<br /><b>Update:</b> @UpdateChanges</span>, Severity.Info, configure: config);
}

@code {
    private bool _newVersionAvailable = false;
    private string _newVersion = string.Empty;
    private string UpdateChanges = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await RegisterForUpdateAvailableNotification();
    }

    private async Task RegisterForUpdateAvailableNotification()
    {
        await _jsRuntime.InvokeAsync<object>(
            identifier: "registerForUpdateAvailableNotification",
            DotNetObjectReference.Create(this),
            nameof(OnUpdateAvailable));
    }

    [JSInvokable(nameof(OnUpdateAvailable))]
    public Task OnUpdateAvailable(string Version, string Changelog)
    {
        Console.WriteLine($"Update available! Version: {Version} Changelog: {Changelog}");

        _newVersionAvailable = true;
        _newVersion = Version;
        UpdateChanges = Changelog;

        StateHasChanged();

        return Task.CompletedTask;
    }

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}